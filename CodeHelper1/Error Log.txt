Your code is running at https://firstworkspace-jadiker.c9.io.
Important: use os.getenv(PORT, 8080) as the port and os.getenv(IP, 0.0.0.0) as the host in your scripts!

make my day please: "make my please world"
This is the possPhrases that I'm giving back
['^$$^ make ^$$^', 'make my day', 'make ^$$^', 'make something useless', 'make ^$$^ please', '^$$^ make me happy', 'make my day please', 'make ^$$^ please']
Top index:
7


About to match wordNum 1! Here's wordsToKnow, possPhrases, phraseEnds, and nextWords
[('make', [0, 1, 2, 3, 4, 5, 6, 7]), ('my', []), ('please', []), ('world', [])]
['^$$^ make ^$$^', 'make my day', 'make ^$$^', 'make something useless', 'make ^$$^ please', '^$$^ make me happy', 'make my day please', 'make ^$$^ please']
['^$$^', 'my day', '^$$^', 'something useless', '^$$^ please', 'me happy', 'my day please', '^$$^ please']
['^$$^', 'my', '^$$^', 'something', '^$$^ please', 'me', 'my', '^$$^ please']


takeOutNumFromWordList: num, wordsToKnow: 
(3, [('make', [0, 1, 2, 3, 4, 5, 6, 7]), ('my', [1, 6]), ('please', []), ('world', [])])


takeOutNumFromWordList: num, wordsToKnow: 
(5, [('make', [0, 1, 2, 4, 5, 6, 7]), ('my', [1, 6]), ('please', []), ('world', [])])


definePhrase: Phrases matched! wordNum is 1
[('make', [0, 1, 2, 4, 6, 7]), ('my', [1, 6]), ('please', []), ('world', [])]
This is the possPhrases that I'm giving back
['^$$^ make ^$$^', 'make my day', 'make ^$$^', '', 'make ^$$^ please', '', 'make my day please', 'make ^$$^ please', 'my house', 'my day', 'my ^$$^', 'my ^$$^ world']
Top index:
11


About to match wordNum 2! Here's wordsToKnow, possPhrases, phraseEnds, and nextWords
[('make', [0, 1, 2, 4, 6, 7]), ('my', [1, 6, 8, 9, 10, 11]), ('please', []), ('world', [])]
['^$$^ make ^$$^', 'make my day', 'make ^$$^', '', 'make ^$$^ please', '', 'make my day please', 'make ^$$^ please', 'my house', 'my day', 'my ^$$^', 'my ^$$^ world']
['^$$^', 'day', '^$$^', '', '^$$^ please', '', 'day please', '^$$^ please', 'house', 'day', '^$$^', '^$$^ world']
['^$$^', 'day', '^$$^', '', '^$$^ please', '', 'day', '^$$^ please', 'house', 'day', '^$$^', '^$$^ world']


takeOutNumFromWordList: num, wordsToKnow: 
(1, [('make', [0, 1, 2, 4, 6, 7]), ('my', [1, 6, 8, 9, 10, 11]), ('please', [4, 7]), ('world', [])])


takeOutNumFromWordList: num, wordsToKnow: 
(6, [('make', [0, 2, 4, 6, 7]), ('my', [6, 8, 9, 10, 11]), ('please', [4, 7]), ('world', [])])


takeOutNumFromWordList: num, wordsToKnow: 
(8, [('make', [0, 2, 4, 7]), ('my', [8, 9, 10, 11]), ('please', [4, 7]), ('world', [])])


takeOutNumFromWordList: num, wordsToKnow: 
(9, [('make', [0, 2, 4, 7]), ('my', [9, 10, 11]), ('please', [4, 7]), ('world', [])])


definePhrase: Phrases matched! wordNum is 2
[('make', [0, 2, 4, 7]), ('my', [10, 11]), ('please', [4, 7]), ('world', [])]
This is the possPhrases that I'm giving back
['^$$^ make ^$$^', '', 'make ^$$^', '', 'make ^$$^ please', '', '', 'make ^$$^ please', '', '', 'my ^$$^', 'my ^$$^ world', '^$$^ please', 'please work everytime for everything because that would be wonderful']
Top index:
13


About to match wordNum 3! Here's wordsToKnow, possPhrases, phraseEnds, and nextWords
[('make', [0, 2, 4, 7]), ('my', [10, 11]), ('please', [4, 7, 12, 13]), ('world', [])]
['^$$^ make ^$$^', '', 'make ^$$^', '', 'make ^$$^ please', '', '', 'make ^$$^ please', '', '', 'my ^$$^', 'my ^$$^ world', '^$$^ please', 'please work everytime for everything because that would be wonderful']
['^$$^', '', '^$$^', '', '', '', '', '', '', '', '^$$^', '^$$^ world', '', 'work everytime for everything because that would be wonderful']
['^$$^', '', '^$$^', '', '', '', '', '', '', '', '^$$^', '^$$^ world', '', 'work']


takeOutNumFromWordList: num, wordsToKnow: 
(13, [('make', [0, 2, 4, 7]), ('my', [10, 11]), ('please', [4, 7, 12, 13]), ('world', [11])])


definePhrase: Phrases matched! wordNum is 3
[('make', [0, 2, 4, 7]), ('my', [10, 11]), ('please', [4, 7, 12]), ('world', [11])]
fakeDictTrans: ERROR! Word: world is unknown by the dictionary!
This is the possPhrases that I'm giving back
['^$$^ make ^$$^', '', 'make ^$$^', '', 'make ^$$^ please', '', '', 'make ^$$^ please', '', '', 'my ^$$^', 'my ^$$^ world', '^$$^ please', '']
Top index:
13


deleteIncompletePhrases: started
Right before final matchup!!!! Here's wordsToKnow, possPhrases


getPhraseMatchOrder: wordsToKnow
[('make', [0, 2, 4, 7]), ('my', [10, 11]), ('please', [4, 7, 12]), ('world', [11])]


getPhraseMatchOrder: possPhrases
['^$$^ make ^$$^', '', 'make ^$$^', '', 'make ^$$^ please', '', '', 'make ^$$^ please', '', '', 'my ^$$^', 'my ^$$^ world', '^$$^ please', '']


getPhraseMatchOrder: len(possPhrases)
14


Basically done, just making it simpler! Here's finalPhrases, finalMatches
['^$$^ make ^$$^', '', 'make ^$$^', '', 'make ^$$^ please', '', '', 'make ^$$^ please', '', '', 'my ^$$^', 'my ^$$^ world', '^$$^ please', '']
[('make', 0), ('my', 10), ('please', 12), 'world']


Traceback (most recent call last):
  File "/home/ubuntu/workspace/Code Helper (Summer 2015)/PhraseDefiner.py", line 534, in <module>
    finalTest(2)
  File "/home/ubuntu/workspace/Code Helper (Summer 2015)/PhraseDefiner.py", line 528, in finalTest
    answer, phrases = pd.definePhrase(input("make my day please: "))
  File "/home/ubuntu/workspace/Code Helper (Summer 2015)/PhraseDefiner.py", line 483, in definePhrase
    finalMatches, finalPhrases = self.cleanupFinalMatchup(finalMatches, finalPhrases) #todo check
  File "/home/ubuntu/workspace/Code Helper (Summer 2015)/PhraseDefiner.py", line 347, in cleanupFinalMatchup
    numList = getUsedPhraseNums(wordList)
  File "/home/ubuntu/workspace/Code Helper (Summer 2015)/PhraseDefiner.py", line 307, in getUsedPhraseNums
    word, num = wordTuple
ValueError: too many values to unpack


-----------------------------------------------------------------------------------------------------------------------------------
Another error, December 10th, 2015

make my day please: "<<>> make me unhappy"
fakeDictTrans: ERROR! Word: <<>> is unknown by the dictionary!
This is the possPhrases that I'm giving back
[]
Top index:
-1


About to match wordNum 1! Here's wordsToKnow, possPhrases, phraseEnds, and nextWords
[('<<>>', []), ('make', []), ('me', []), ('unhappy', [])]
[]
[]
[]


definePhrase: Phrases matched! wordNum is 1
[('<<>>', []), ('make', []), ('me', []), ('unhappy', [])]
This is the possPhrases that I'm giving back
['^$$^ make ^$$^', 'make my day', 'make ^$$^', 'make something useless', 'make ^$$^ please', '^$$^ make me happy', 'make my day please', 'make ^$$^ please']
Top index:
7


About to match wordNum 2! Here's wordsToKnow, possPhrases, phraseEnds, and nextWords
[('<<>>', []), ('make', [0, 1, 2, 3, 4, 5, 6, 7]), ('me', []), ('unhappy', [])]
['^$$^ make ^$$^', 'make my day', 'make ^$$^', 'make something useless', 'make ^$$^ please', '^$$^ make me happy', 'make my day please', 'make ^$$^ please']
['^$$^', 'my day', '^$$^', 'something useless', '^$$^ please', 'me happy', 'my day please', '^$$^ please']
['^$$^', 'my', '^$$^', 'something', '^$$^ please', 'me', 'my', '^$$^ please']


takeOutNumFromWordList: num, wordsToKnow: 
(1, [('<<>>', []), ('make', [0, 1, 2, 3, 4, 5, 6, 7]), ('me', [5]), ('unhappy', [])])


takeOutNumFromWordList: num, wordsToKnow: 
(3, [('<<>>', []), ('make', [0, 2, 3, 4, 5, 6, 7]), ('me', [5]), ('unhappy', [])])


takeOutNumFromWordList: num, wordsToKnow: 
(6, [('<<>>', []), ('make', [0, 2, 4, 5, 6, 7]), ('me', [5]), ('unhappy', [])])


definePhrase: Phrases matched! wordNum is 2
[('<<>>', []), ('make', [0, 2, 4, 5, 7]), ('me', [5]), ('unhappy', [])]
fakeDictTrans: ERROR! Word: me is unknown by the dictionary!
This is the possPhrases that I'm giving back
['^$$^ make ^$$^', '', 'make ^$$^', '', 'make ^$$^ please', '^$$^ make me happy', '', 'make ^$$^ please']
Top index:
7


About to match wordNum 3! Here's wordsToKnow, possPhrases, phraseEnds, and nextWords
[('<<>>', []), ('make', [0, 2, 4, 5, 7]), ('me', [5]), ('unhappy', [])]
['^$$^ make ^$$^', '', 'make ^$$^', '', 'make ^$$^ please', '^$$^ make me happy', '', 'make ^$$^ please']
['^$$^', '', '^$$^', '', '^$$^ please', 'happy', '', '^$$^ please']
['^$$^', '', '^$$^', '', '^$$^ please', 'happy', '', '^$$^ please']


takeOutNumFromWordList: num, wordsToKnow: 
(5, [('<<>>', []), ('make', [0, 2, 4, 5, 7]), ('me', [5]), ('unhappy', [])])


definePhrase: Phrases matched! wordNum is 3
[('<<>>', []), ('make', [0, 2, 4, 7]), ('me', []), ('unhappy', [])]
fakeDictTrans: ERROR! Word: unhappy is unknown by the dictionary!
This is the possPhrases that I'm giving back
['^$$^ make ^$$^', '', 'make ^$$^', '', 'make ^$$^ please', '', '', 'make ^$$^ please']
Top index:
7


deleteIncompletePhrases: started
deleteIncompletePhrases: deleting number 4


takeOutNumFromWordList: num, wordsToKnow: 
(4, [('<<>>', []), ('make', [0, 2, 4, 7]), ('me', []), ('unhappy', [])])


deleteIncompletePhrases: deleting number 7


takeOutNumFromWordList: num, wordsToKnow: 
(7, [('<<>>', []), ('make', [0, 2, 7]), ('me', []), ('unhappy', [])])


Right before final matchup!!!! Here's wordsToKnow, possPhrases


getPhraseMatchOrder: wordsToKnow
[('<<>>', []), ('make', [0, 2]), ('me', []), ('unhappy', [])]


getPhraseMatchOrder: possPhrases
['^$$^ make ^$$^', '', 'make ^$$^', '', '', '', '', '']


getPhraseMatchOrder: len(possPhrases)
8


Basically done, just making it simpler! Here's finalPhrases, finalMatches
['^$$^ make ^$$^', '', 'make ^$$^', '', '', '', '', '']
['<<>>', ('make', 0), 'me', 'unhappy']


Traceback (most recent call last):
  File "/home/ubuntu/workspace/Code Helper (Summer 2015)/PhraseDefiner.py", line 534, in <module>
    finalTest(2)
  File "/home/ubuntu/workspace/Code Helper (Summer 2015)/PhraseDefiner.py", line 528, in finalTest
    answer, phrases = pd.definePhrase(input("make my day please: "))
  File "/home/ubuntu/workspace/Code Helper (Summer 2015)/PhraseDefiner.py", line 483, in definePhrase
    finalMatches, finalPhrases = self.cleanupFinalMatchup(finalMatches, finalPhrases) #todo check
  File "/home/ubuntu/workspace/Code Helper (Summer 2015)/PhraseDefiner.py", line 347, in cleanupFinalMatchup
    numList = getUsedPhraseNums(wordList)
  File "/home/ubuntu/workspace/Code Helper (Summer 2015)/PhraseDefiner.py", line 307, in getUsedPhraseNums
    word, num = wordTuple
ValueError: too many values to unpack
